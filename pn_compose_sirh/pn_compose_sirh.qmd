---
title: Adding hospitalization to an SIR model using AlgebraicPetri.jl
date: 2024-08-06
author: Simon Frost (@sdwfrost)
format:
    html: default
    docx: default
    gfm: default
    pdf: default
---

## Introduction

This notebook demonstrates how to add a new states to an existing model; in this case, adding hospitalization to an SIR model.

## Libraries

```{julia}
using AlgebraicPetri,AlgebraicPetri.TypedPetri
using Catlab, Catlab.CategoricalAlgebra, Catlab.Programs
using Catlab.WiringDiagrams, Catlab.Graphics
using AlgebraicDynamics.UWDDynam
using LabelledArrays
using OrdinaryDiffEq
using Plots
```

## Transitions

We first define a labelled Petri net that has the different types of transition in our models. The first argument is an array of state names as symbols (here, a generic `:Pop`), followed by the transitions in the model. Transitions are given as `transition_name=>((input_states)=>(output_states))`.

```{julia}
epi_lpn = LabelledPetriNet(
  [:Pop],
  :infection=>((:Pop, :Pop)=>(:Pop, :Pop)),
  :recovery=>(:Pop=>:Pop),
  :hospitalization=>(:Pop=>:Pop),
  :death=>(:Pop=>())
);
```

Labelled Petri nets contain four types of fields; `S`, states or species; `T`, transitions; `I`, inputs; and `O`, outputs.

Next, we define the transmission model as an undirected wiring diagram using the `@relation` macro, referring to the transitions in our labelled Petri net above (`infection` and `recovery`). We include a reference to `Pop` in the definition of the state variables to allow us to do this.

```{julia}
sir_uwd = @relation (S, I, R) where (S::Pop, I::Pop, R::Pop) begin
    infection(S, I, I, I)
    recovery(I, R)
end;
```

We then use `oapply_typed`, which takes in a labelled Petri net (here, `epi_lpn`) and an undirected wiring diagram (`si_uwd`), where each of the boxes is labeled by a symbol that matches the label of a transition in the Petri net, in addition to an array of symbols for each of the rates in the wiring diagram. This produces a Petri net given by colimiting the transitions together, and returns the `ACSetTransformation` from that Petri net to the type system.

```{julia}
sir_acst = oapply_typed(epi_lpn, sir_uwd, [:β, :γ]);
```

To obtain the labelled Petri net, we extract the domain of the `ACSetTransformation` using `dom`.

```{julia}
sir_lpn = dom(sir_acst);
```

We can obtain a GraphViz representation of the labelled Petri net using `to_graphviz`.

```{julia}
to_graphviz(sir_lpn)
```

We now define another model that considers another population representing individuals that are hospitalized following infection, and either recover or die.

```{julia}
h_uwd = @relation (I, H, R) where (I::Pop, H::Pop, R::Pop) begin
    hospitalization(I, H)
    recovery(H, R)
    death(H)
end
h_acst = oapply_typed(epi_lpn, h_uwd, [:η, :γₕ, :ωₕ])
h_lpn = dom(h_acst)
to_graphviz(h_lpn)
```

We also add death due to infection to the model.

```{julia}
i_uwd = @relation (I,) where (I::Pop,) begin
    death(I)
end
i_acst = oapply_typed(epi_lpn, i_uwd, [:ω])
i_lpn = dom(i_acst)
to_graphviz(i_lpn)
```

To glue the models together, we first define an undirected wiring diagram which contains all our states, and two transitions.

```{julia}
sirh_uwd = @relation (S, I, R, H) where (S::Pop, I::Pop, R::Pop, H::Pop) begin
    sir(S, I, R)
    h(I, H, R)
    i(I)
end;
```

We then create a `StructuredMulticospan` using this wiring diagram, telling `oapply` that `si` in the wiring diagram corresponds to the `si_lpn` labelled Petri net, etc.. `Open` converts a PetriNet to an OpenPetriNet where each state is exposed as a leg of the cospan, allowing it to be composed over an undirected wiring diagram.

```{julia}
sirh_smc = oapply(sirh_uwd, Dict(
    :sir => Open(sir_lpn),
    :h => Open(h_lpn),
    :i => Open(i_lpn)
));
```

We extract the labelled Petri net by extracting the object that is the codomain of all the legs, using the `apex` function.

```{julia}
sirh_lpn = apex(sirh_smc)
to_graphviz(sirh_lpn)
```

## Running the model

To run an ODE model from the labelled Petri net, we generate a function that can be passed to SciML's `ODEProblem` using  `vectorfield`.

```{julia}
sirh_vf = vectorfield(sirh_lpn);
```

The initial conditions and parameter values are written as labelled arrays. We can (and should) check the ordering of these variables.

```{julia}
snames(sirh_lpn)
```

```{julia}
u0 = @LArray [990.0, 10.0, 0.0, 0.0] Tuple(snames(sirh_lpn))
```

```{julia}
tnames(sirh_lpn)
```

```{julia}
p = @LArray [0.5/1000, 0.25, 0.05, 0.2, 0.05, 0.05] Tuple(tnames(sirh_lpn))
```

```{julia}
tspan = (0.0, 40.0);
```

We can now use the initial conditions, the time span, and the parameter values to simulate the system.

```{julia}
sirh_prob = ODEProblem(sirh_vf, u0, tspan, p)
sirh_sol = solve(sirh_prob, Rosenbrock32())
plot(sirh_sol)
```
